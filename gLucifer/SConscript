import os, subprocess
from config import Package, packages, cc
Import('env')

#
# Need to make a copy because SCons uses the environment
# at it's final state, so StGermain ends up depending on
# StgDomain, etc. 
#

env = env.Clone()
env['CURR_PROJECT'] = 'gLucifer'

#
# Inside each project we will be accessing headers without the
# project name as a prefix, so we need to let SCons know how to
# find those headers.
#

env.Append(CPPPATH=env['build_dir'] + '/include/gLucifer')

#
# Need to include the gLucifer library for binaries.
#

libs = ['gLucifer'] + env.get('LIBS', [])

#
# Keep a list of all the objects we build so we can make a library
# afterwards.
#

objs = []
suites = []
tst_exp = []
tst_input = []

# Get the revision definition.
revision = "UNKNOWN"
path = "UNKNOWN"
branch = "UNKNOWN"
for entry in env['IDDEFINES']:
    if entry[0] == 'GLUCIFER':
        revision = entry[1]
        path = entry[2]
        branch = entry[3]
        break


#Database types header...
env.Install('include/gLucifer/Viewer', 'Viewer/src/Types.h')

#
# Process each directory uniformly.
#
dirs = Split('Base DrawingObjects libgLucifer Viewer/src/sqlite3')
for d in dirs:

    # Need the module name, which is just the directory.
    mod_name = env['ESCAPE']('"' + ''.join(d.split('/')) + '"')
    version_name = 'GLUCIFER_VERSION'
    cpp_defs = [('CURR_MODULE_NAME', mod_name)] + env.get('CPPDEFINES', []) + \
               [('VERSION', revision)] + [('PATH', path)] + \
               [('BRANCH', branch)]

    # Setup where to look for files.
    src_dir = d + '/src'
    inc_dir = 'include/gLucifer/' + d
    tst_dir = d + '/tests'
    tst_exp_dir = tst_dir + '/expected'
    tst_input_dir = tst_dir + '/input'
    tst_install_dir = 'tests/gLucifer/' + d

    # Install the headers
    hdrs = env.Install(inc_dir, Glob(src_dir + '/*.h'))

    # Build our source files.
    srcs = Glob(src_dir + '/*.c')
    for src in srcs:
        stg_cpp_defs = cpp_defs + [('SOURCE_FILE', '"\\"' + src.name + '\\""')]
        objs += env.SharedObject(src, CPPDEFINES=stg_cpp_defs)

    # Build any test suites we might find.
    suites += env.Object(Glob(tst_dir + '/*Suite.c'))

    # Install any test expected and input files
    tst_exp += env.Install(tst_install_dir + '/expected', Glob(tst_exp_dir + '/*'))
    tst_input += env.Install(tst_install_dir + '/input', Glob(tst_input_dir + '/*'))

# Need to install headers from libgLucifer.
env.Install('include/gLucifer', Glob('libgLucifer/src/*.h'))
# Install dump scripts
env.Install('bin', 'dump.sh')
env.Install('bin', 'html.py')
env.Install('bin', 'results_template.html')

#
# Build plugins.
#

dirs = [('libgLucifer/Toolbox')]
pl_objs = []
pl_regs = []
for d in dirs:

    if isinstance(d, tuple):
        name = d[1] + 'module'
        d = d[0]
    else:
        name = 'gLucifer_' + d.split('/')[-1] + 'module'

    mod_name = env['ESCAPE']('"' + ''.join(d.split('/')) + '"')
    cpp_defs = [('CURR_MODULE_NAME', mod_name)] + env.get('CPPDEFINES', []) + \
               [('VERSION', revision)] + [('PATH', path)] + \
               [('BRANCH', branch)]

    env.Install('include/gLucifer/' + d.split('/')[-1], Glob(d + '/*.h'))

    srcs = Glob(d + '/*.c')
    cur_objs = env.SharedObject(srcs, CPPDEFINES=cpp_defs)

    # If we have shared libraries, build the dynamic plugin.
    if env['shared_libs']:
        lib_pre = env['LIBPREFIXES']
        if not isinstance(lib_pre, list):
            lib_pre = [lib_pre]
        env.SharedLibrary('lib/' + name, cur_objs,
                          SHLIBPREFIX='',
                          LIBPREFIXES=lib_pre + [''],
                          LIBS=libs)

    # If we are building static libs we need to construct a C file
    # mapping the plugin's name to its register function.
    if env['static_libs']:
        pl_regs += [name]

    # Keep track of all the plugin objects.
    pl_objs += cur_objs

#
# Build shared library.
#

if env['shared_libs']:
    env.SharedLibrary('lib/gLucifer', objs)

#
# Write the static registry code.
#

if env['static_libs']:

    reg_c = '#include <StGermain/StGermain.h>\n\n'
    reg_c += 'extern int stg_num_modules;\n'
    reg_c += 'extern char **stg_module_names;\n'
    reg_c += 'extern int *stg_num_module_syms;\n'
    reg_c += 'extern char ***stg_module_syms;\n\n'
    reg_c += 'extern void ***stg_module_funcs;\n\n'
    for n in pl_regs:
        n = n[:-6]
        reg_c += 'extern void (%s_Register)();\n'%n
        if n.find('Toolbox') != -1:
            reg_c += 'extern void (%s_Initialise)();\n'%n
            reg_c += 'extern void (%s_Finalise)();\n'%n
            reg_c += 'extern void (%s_GetDeps)();\n'%n
    reg_c += '\n'

    reg_c += 'void gLucifer_register_static_modules() {\n'
    reg_c += '   int new_num = stg_num_modules + %d;\n\n'%len(pl_regs)
    
    reg_c += '   stg_module_names = (char**)realloc(stg_module_names, new_num*sizeof(char*));\n'
    for i in range(len(pl_regs)):
        n = pl_regs[i][:-6]
        reg_c += '   stg_module_names[stg_num_modules + %d] = (char*)"%s";\n'%(i, n)
        
    reg_c += '\n   stg_num_module_syms = (int*)realloc(stg_num_module_syms, new_num*sizeof(int));\n'
    for i in range(len(pl_regs)):
        n = pl_regs[i][:-6]
        if n.find('Toolbox') != -1:
            num_syms = 4
        else:
            num_syms = 1
        reg_c += '   stg_num_module_syms[stg_num_modules + %d] = %d;\n'%(i, num_syms)

    reg_c += '\n   stg_module_syms = (char***)realloc(stg_module_syms, new_num*sizeof(char**));\n'
    for i in range(len(pl_regs)):
        n = pl_regs[i][:-6]
        if n.find('Toolbox') != -1:
            num_syms = 4
        else:
            num_syms = 1
        reg_c += '   stg_module_syms[stg_num_modules + %d] = (char**)malloc(%d*sizeof(char*));\n'%(i, num_syms)
        reg_c += '   stg_module_syms[stg_num_modules + %d][0] = (char*)"%s_Register";\n'%(i, n)
        if n.find('Toolbox') != -1:
            reg_c += '   stg_module_syms[stg_num_modules + %d][1] = (char*)"%s_Initialise";\n'%(i, n)
            reg_c += '   stg_module_syms[stg_num_modules + %d][2] = (char*)"%s_Finalise";\n'%(i, n)
            reg_c += '   stg_module_syms[stg_num_modules + %d][3] = (char*)"%s_GetDeps";\n'%(i, n)

    reg_c += '\n   stg_module_funcs = (void***)realloc(stg_module_funcs, new_num*sizeof(void**));\n'
    for i in range(len(pl_regs)):
        n = pl_regs[i][:-6]
        if n.find('Toolbox') != -1:
            num_syms = 4
        else:
            num_syms = 1
        reg_c += '   stg_module_funcs[stg_num_modules + %d] = (void**)malloc(%d*sizeof(void*));\n'%(i, num_syms)
        reg_c += '   stg_module_funcs[stg_num_modules + %d][0] = (void*)%s_Register;\n'%(i, n)
        if n.find('Toolbox') != -1:
            reg_c += '   stg_module_funcs[stg_num_modules + %d][1] = (void*)%s_Initialise;\n'%(i, n)
            reg_c += '   stg_module_funcs[stg_num_modules + %d][2] = (void*)%s_Finalise;\n'%(i, n)
            reg_c += '   stg_module_funcs[stg_num_modules + %d][3] = (void*)%s_GetDeps;\n'%(i, n)

    reg_c += '\n   stg_num_modules += %d;\n'%len(pl_regs)
    reg_c += '}\n'

    reg_filename = os.path.join(env['build_dir'], 'gLucifer', 'gLucifer_static_modules.c')
    if not os.path.exists(os.path.dirname(reg_filename)):
        os.makedirs(os.path.dirname(reg_filename))
    reg_file = open(reg_filename, 'w')
    reg_file.write(reg_c)
    reg_file.close()
    reg_obj = env.Object(reg_filename)

    # Add our register function to the StGermain module file.
    f = open(File(env['build_dir'] + '/StGermain/stg_static_modules.c').abspath, 'r')
    txt = f.readlines()
    f.close()
    txt.insert(-2, '   gLucifer_register_static_modules();\n')
    txt.insert(0, 'void gLucifer_register_static_modules();\n')
    f = open(File(env['build_dir'] + '/StGermain/stg_static_modules.c').abspath, 'w')
    f.writelines(txt)
    f.close()

    # Static library.
    l = env.StaticLibrary(env['build_dir'] + '/lib/gLucifer', objs + pl_objs + reg_obj)
    env.Install(env['prefix'] + '/lib', l)

#
# Test runner program.
#

env.PCUTest('tests/testgLucifer', suites,
    PCU_LIBHEADERS="#include <StGermain/StGermain.h>\n" \
        "#include <StgDomain/StgDomain.h>\n"
        "#include <StgFEM/StgFEM.h>\n" \
        "#include <gLucifer/gLucifer.h>",
    PCU_SETUP="\n" \
        "#ifdef NOSHARED\n" \
        "   stgdomain_register_static_modules();\n" \
        "   stgfem_register_static_modules();\n" \
        "   gLucifer_register_static_modules();\n" \
        "   StGermain_Init(&argc, &argv);\n" \
        "   StgDomain_Init(&argc, &argv);\n" \
        "   StgFEM_Init(&argc, &argv);\n" \
        "   gLucifer_Init(&argc, &argv);\n" \
        "#else\n" \
        "   StGermain_Init(&argc, &argv);\n" 
        "   ModulesManager_LoadModule(stgToolboxesManager, \"gLucifer\" );\n" \
        "#endif\n" \
        "   stJournal->firewallProducesAssert = True;\n" \
        "   stJournal->firewallProtected = True;",
    PCU_TEARDOWN="#ifdef NOSHARED\n"
        "   gLucifer_Finalise();\n" \
        "   StgFEM_Finalise();\n" \
        "   StgDomain_Finalise();\n" \
        "   StGermain_Finalise();\n" \
        "#else\n" \
        "   ModulesManager_UnloadModule(stgToolboxesManager, \"gLucifer\" );\n" \
        "   StGermain_Finalise();\n" \
        "#endif", 
    LIBS=libs,
    PCU_EXP=tst_exp,
    PCU_INPUT=tst_input,
    PROJECT="gLucifer")

#
# Install XML input files.
#

env.Install('lib/StGermain/gLucifer', Glob('ModelComponents/*.xml'))

# For now, consider the gLucifer tests an "integration" suite ... 
#  may want to add a new type later.
## NB: commented out until have a chance to go through test fails on 
#  different architectures ...
env.AddVisualisationTestSuite('SysTest/testLuc.py')
