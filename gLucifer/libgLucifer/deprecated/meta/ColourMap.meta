<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">

<param name="Name">lucColourMap</param>
<param name="Author">Robert Turnbull</param>
<param name="Organisation">AuScope</param>
<param name="Project">gLucifer</param>
<param name="Location">./gLucifer/Base/src/</param>
<param name="Project Web">http://mcc.monash.edu.au/gLucifer</param>
<param name="Copyright">Copyright (c) 2010, Monash University</param>
<param name="License">http://www.opensource.org/licenses/bsd-license.php</param>
<param name="Parent">Stg_Component</param>
<param name="Reference"></param>
<param name="Summary">...</param>
<param name="Description">Provides a way for lucDrawingObjects to map between scalar values and colours.</param>

<!--Now the interesting stuff-->
<list name="Params">
	<struct>
		<param name="Name">colours</param>
		<param name="Type">String</param>
		<param name="Default">"Blue;White;Red"</param>
		<param name="Description">Creates a list of colours to be used to draw objects. The first colour mentioned corresponds to the minimum value being plotting and the last colour corresponds to the maximum value being plotting. The other colours are distributed evenly between these values. The Colour Map smoothly interpolates these colours together. These colour names must correspond to the X11 Colour map names (see http://en.wikipedia.org/wiki/X11_Color_Names) or be a hex colour triplet with a '#' at the start (see http://en.wikipedia.org/wiki/Hex_triplet). Colours can be locked to specific values on the colourMap by providing a value in brackets before the colour name, eg: (0.5)Red will fix the colour red wherever the value 0.5 occurs on the map.</param>
	</struct>
	<struct>
		<param name="Name">minimum</param>
		<param name="Type">Double</param>
		<param name="Default">0.0</param>
		<param name="Description">Sets the value for the colour at the first colour in the colour map to correspond to.</param>
	</struct>
	<struct>
		<param name="Name">maximum</param>
		<param name="Type">Double</param>
		<param name="Default">1.0</param>
		<param name="Description">Sets the value for the colour at the last colour in the colour map to correspond to.</param>
	</struct>
	<struct>
		<param name="Name">logScale</param>
		<param name="Type">Bool</param>
		<param name="Default">False</param>
		<param name="Description">If True, then the variation in colour happens to a logarithmic scale rather than a linear scale.</param>
	</struct>
	<struct>
		<param name="Name">dynamicRange</param>
		<param name="Type">Bool</param>
		<param name="Default">False</param>
		<param name="Description">If True, then this colour map can reset the minimum and maximum values to be appropriate to the FieldVariable or SwarmVariable that is is being used to draw, if False, then the original minimum and maximum values are used and never changed.</param>
	</struct>
	<struct>
		<param name="Name">centreValue</param>
		<param name="Type">Double</param>
		<param name="Default">0.0</param>
		<param name="Description">If a value is provided here, this value will always be the centre value of the colour map. Ignored if logScale is True. This has the effect of pushing the minimum or maximum out so that there is an equal range of values between minimum -- centreValue -- maximum.</param>
	</struct>

</list>

<list name="Dependencies">

</list>
<!-- Add an exmaple XML if possible -->
<param name="Example"><![CDATA[
		<struct name="temperatureColourMap">
			<param name="Type">lucColourMap</param>
			<param name="colours">#0B0133 White #B7210B</param>
			<param name="dynamicRange">true</param>
		</struct>]]>
</param>

</StGermainData>
