<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">

<param name="Name">lucIsosurface</param>
<param name="Author">Robert Turnbull</param>
<param name="Organisation">AuScope</param>
<param name="Project">gLucifer</param>
<param name="Location">./gLucifer/DrawingObjects/src/</param>
<param name="Project Web">http://mcc.monash.edu.au/gLucifer</param>
<param name="Copyright">Copyright (c) 2010, Monash University</param>
<param name="License">http://www.opensource.org/licenses/bsd-license.php</param>
<param name="Parent">lucDrawingObject</param>
<param name="Reference">Lorensen, William and Harvey E. Cline. Marching Cubes: A High Resolution 3D Surface Construction Algorithm. Computer Graphics (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170)</param>
<param name="Summary"></param>
<param name="Description">Visualises a scalar field in 3D by the use of a surface over which all the values of the field are constant (an isosurface). It gets the value of the field on a 3D grid and uses the Marching Cubes algorithm to construct the surface. This algorithm is described in Lorensen et al.</param>

<!--Now the interesting stuff-->
<list name="Params">
	<struct>
		<param name="Name">resolution</param>
		<param name="Type">UnsignedInt</param>
		<param name="Default">64</param>
		<param name="Description">The default value for the resolutionX, resolutionY and resolutionZ. If these values aren't set the sampling grid will be uniform with this number of vertices in each direction.</param>
	</struct>
	<struct>
		<param name="Name">resolutionX</param>
		<param name="Type">UnsignedInt</param>
		<param name="Default">defaultResolution</param>
		<param name="Description">The number of grid points in the X direction.</param>
	</struct>
	<struct>
		<param name="Name">resolutionY</param>
		<param name="Type">UnsignedInt</param>
		<param name="Default">defaultResolution</param>
		<param name="Description">The number of grid points in the Y direction.</param>
	</struct>
	<struct>
		<param name="Name">resolutionZ</param>
		<param name="Type">UnsignedInt</param>
		<param name="Default">defaultResolution</param>
		<param name="Description">The number of grid points in the Z direction.</param>
	</struct>
	<struct>
		<param name="Name">isovalue</param>
		<param name="Type">Double</param>
		<param name="Default">0.0</param>
		<param name="Description">The value of the scalar field on the surface.</param>
	</struct>
	<struct>
		<param name="Name">drawWalls</param>
		<param name="Type">Bool</param>
		<param name="Default">False</param>
		<param name="Description">This will create an closed surface by drawing shapes along the side walls of the box.</param>
	</struct>
	<struct>
		<param name="Name">sampleGlobal</param>
		<param name="Type">Bool</param>
		<param name="Default">False</param>
		<param name="Description">This will sample the field over the global domain rather than per element. Useful if the field is not continuous at element boundaries.</param>
	</struct>
	<struct>
		<param name="Name">gradientNormals</param>
		<param name="Type">Bool</param>
		<param name="Default">True</param>
		<param name="Description">Normals are calculated using the derivative of the field at each triangle vertex, if this functionality is not available on the field set this parameter to False to calculate a plane normal for each triangle instead.</param>
	</struct>
	<struct>
		<param name="Name">maskType</param>
		<param name="Type">String</param>
		<param name="Default">GreaterThan</param>
		<param name="Description">When testing whether to draw a triangle in the surface - this mask compares the value of a field at the vertices of the triangle and compares it to a value. This is the nature of the comparison. It can be "GreaterThan", "LessThan" or "EqualTo".</param>
	</struct>
	<struct>
		<param name="Name">maskValue</param>
		<param name="Type">Double</param>
		<param name="Default">0.0</param>
		<param name="Description">The value to compare against the mask field.</param>
	</struct>
	<struct>
		<param name="Name">maskTolerance</param>
		<param name="Type">Double</param>
		<param name="Default">0.001</param>
		<param name="Description">If the maskType is set to 'EqualTo', the mask is activated with the value of the mask field is within this tolerance to the mask value.</param>
	</struct>
</list>

<list name="Dependencies">
	<struct>
		<param name="Essential">True</param>
		<param name="Name">IsosurfaceField</param>
		<param name="Type">FieldVariable</param>
		<param name="Description">The field that you want to visualise with an isosurface.</param>
	</struct>
	<struct>
		<param name="Essential">No</param>
		<param name="Name">ColourField</param>
		<param name="Type">FieldVariable</param>
		<param name="Description">This is the field used to colour the isosurface if a lucColourMap is specified. If This is not given, the IsosurfaceField will be used instead.</param>
	</struct>
	<struct>
		<param name="Essential">No</param>
		<param name="Name">MaskField</param>
		<param name="Type">FieldVariable</param>
		<param name="Description">The surface will not be drawn in certain regions depending on the value of this field and the masking parameters specified.</param>
	</struct>

</list>
<!-- Add an exmaple XML if possible -->
<param name="Example">
<![CDATA[
		<struct name="temperatureIsosurface">
			<param name="Type">lucIsosurface</param>
			<param name="IsosurfaceField">TemperatureField</param>
			<param name="ColourMap">temperatureColourMap</param>
			<param name="isovalue">0.5</param>
			<param name="drawWalls">false</param>			
		</struct>
]]>
</param>

</StGermainData>
