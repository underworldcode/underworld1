<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">

<param name="Name">SystemLinearEquations</param>
<param name="Author">...</param>
<param name="Organisation">VPAC</param>
<param name="Project">StgFEM</param>
<param name="Location">./StgFEM/SLE/SystemSetup/src/</param>
<param name="Project Web">http://www.stgermainproject.org/StgFEM.html</param>
<param name="Copyright">Copyright (C) 2004-2005 VPAC.</param>
<param name="License">The Gnu Lesser General Public License v2.1 - http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html</param>
<param name="Parent">Stg_Component</param>
<param name="Reference">...</param>
<param name="Summary">...</param>
<param name="isAbstractClass">True</param>
<param name="Description">This is an Abstract Class which manages a given system of linear equation. It provides the setting up, building and initialisation of the matricies and vectors which are specified in child classes of this component. The means by which this class does this is through adding build/assembly functions onto Entry Points it creates itself. These functions are kicked off as the first part of a linearExecute statement, which can be found here - the second part of the linearExecute statement is a solve step, which is defined in a child class and is referenced here via a function pointer. Also of interest in this component is the algorithmic flow of the solve step, i.e. linear or nonlinear.</param>

<!--Now the interesting stuff-->


<list name="Params">
   <struct>
      <param name="Name">removeBCs</param>
      <param name="Type">Bool</param>
      <param name="Default">True</param>
      <param name="Description">If True, dirichlet boundary conditions are removed from the LHS, and the RHS is corrected, reducing the size of the system. If false, the diagonals of the coefficient matrix corresponding to dirichlet bcs are set to 1 and the value of the bc is set in corresponding the RHS vector.</param>
   </struct>
   <struct>
		<param name="Name">isNonLinear</param>
		<param name="Type">Bool</param>
		<param name="Default">False</param>
		<param name="Description">Optional flag that enforces a nonlinear behavior of the solver. If the simulation requires nonlinear solves this flag should be automatically set to true.</param>
	</struct>
	<struct>
		<param name="Name">nonLinearTolerance</param>
		<param name="Type">Double</param>
		<param name="Default">0.01</param>
		<param name="Description">A relative tolerance to which a nonlinear solve is calculated to.</param>
	</struct>
	<struct>
		<param name="Name">nonLinearMaxIterations</param>
		<param name="Type">UnsignedInt</param>
		<param name="Default">500</param>
		<param name="Description">A maximum number of nonlinear solve iterations that will be performed each time step</param>
	</struct>
	<struct>
		<param name="Name">killNonConvergent</param>
		<param name="Type">Bool</param>
		<param name="Default">True</param>
		<param name="Description">An essential flag, which will kill the simulation if the solver does not appear to be converging after a time step</param>
	</struct>
        <struct>
                <param name="Name">makeConvergenceFile</param>
                <param name="Type">Bool</param>
                <param name="Default">False</param>
                <param name="Description">An optional flag to backup infos on convergence into a Convergence.dat file</param>
        </struct>
        <struct>
                <param name="Name">nonLinearMinIterations</param>
                <param name="Type">UnsignedInt</param>
                <param name="Default">1</param>
                <param name="Description">A minimum number of nonlinear solve iterations that will be performed each time step</param>
        </struct>


</list>

<list name="Dependencies">
	<struct>
		<param name="Essential">No</param>
		<param name="Type">SLE_Solver</param>
		<param name="Description">Is an optional component in charge of Solver specifics. This SLE_Solver component takes the mathematical objects held/managed by this SystemLinearEquations class and executes them accordingly</param>
	</struct>

	<struct>
		<param name="Essential">No</param>
		<param name="Type">FiniteElementContext</param>
		<param name="Description">An optional component which is the global data structure used in the simulation. Used here incase information about the simulation data structures is required</param>
	</struct>

</list>

<param name="Example">Is an Abstract Class</param>

</StGermainData>
