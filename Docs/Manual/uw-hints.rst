.. _uw-hints-and-tricks:

****************
Hints and Tricks
****************

Introduction
============

This chapter provides common troubleshooting information for users using Underworld.

MPI Conflicts
=============

It is important to note that when running Underworld using MPI, the *mpirun* or
*mpiexec* executable corresponds to the same MPI library the *Underworld* executable
is compiled against. Running *Underworld* with a different MPI library can result in
some nasty parallel errors. This issue will also affect CREDO tests that is being ran.

Resolution
----------

On clusters using the *module* system, make sure that the correct modules are being loaded
when running the code as well as compiling it. On desktop machines, make sure that the *PATH*
environment variable is setup correctly so that *mpirun* will be launched using the correct
version of the MPI library used when compiling. It is advised to set the *PATH* environment
variable on the user's login script (*~/.bashrc*).

With regards to CREDO, the environment variable *MPI_RUN_COMMAND* can be set to tell the system
that the CREDO jobs will be running using a custom *mpirun* or *mpiexec* executables rather
than the one specified in the *PATH*.

For example::
 
 MPI_RUN_COMMAND="/usr/local/packages/mpich2-1.2.1p1-debug/bin/"

Underworld and StGermain Executables
====================================

There is no difference between the *Underworld* and *StGermain* executables found inside
the *bin* directory of the Underworld installation.  Technically, Underworld is only a library
and does not itself have an executable. StGermain is the underlying framework which provides
the executable.  A renamed version of the *StGermain* executable (*Underworld*) is provided
to allay any confusion of new Underworld users. Using symbolic link would be a more natural approach,
but there were issues with this approach on certain platforms.

Estimate Simulation Runtime
===========================

The *FrequentOutput.dat* file which is generated by the simulation and resides in the output 
directory together with other output files contains the *CPU_Time* column. This column tells 
how long a specific timestep took to finish.

Simulation's *dt* correspondence to non-dimensional time
=========================================================

While time *dt* is non-dimensional, it is not exactly equal to one non-dimensional time unit.
*dt* is computed automatically by Underworld to keep some algorithms inside its stability field.
It changes from step to step. The evolution of “dt” can be viewed in the *FrequentOutput.dat* file.
If *FrequentOutput.dat* is not generated during the simulation run, the *StgFEM_FrequentOutput*
plugin must be included in the XML input file.

For example:

.. code-block:: xml

 <list name="plugins" mergeType="merge">
    <struct>
       <param name="Type">StgFEM_FrequentOutput</param>
       <param name="Context">context</param>
    </struct>
 </list>
The timestep information is written in the *timeInfo.xxxxx.dat* file. For every checkpointed
step, the total non-dimensional time since the models start is acquired.

Getting *time* and Peak memory usage information
================================================

The command::
 
 /usr/bin/time -f "user\t\t\t%U \nsystem\t\t\t%S \nelapsed \t\t%E \nMajor
 page faults\t%F \nMinor page faults\t%R \nSystem Page size\t%Zbytes"
 StGermain
will dump out more *time* information, in particular multiplying *Minor page faults* by
*System Page size* will give a fairly accurate proxy to the peak memory usage during an Underworld run.

Also, the plugin *StgFEM_PeakMemory* can be used to report memory reports from Petsc. 

For example:

.. code-block:: xml

 <list name="plugins" mergeType="merge">
    <struct>
       <param name="Type">StgFEM_PeakMemory</param>
       <param name="Context">context</param>
    </struct>
 </list>
This will output to *FrequentOutput.dat* information pertaining to StGermain’s internal memory usage
(*StgPeakMem*), PETSc’s maximum malloc’ed memory (*PetscMem*) and the total process memory used (*ProgMem*).
in Megabytes.

