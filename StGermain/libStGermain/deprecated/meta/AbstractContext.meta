<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">

<param name="Name">AbstractContext</param>
<param name="Author">Steve Quenette</param>
<param name="Organisation">VPAC</param>
<param name="Project">StGermain</param>
<param name="Location">./StGermain/Base/Context/src/</param>
<param name="Project Web">http://www.stgermainproject.org/</param>
<param name="Copyright">StGermain Framework. Copyright (C) 2003-2005 VPAC.</param>
<param name="License">The Gnu Lesser General Public License v2.1 - http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html</param>
<param name="Parent">Stg_Component</param>
<param name="Reference"></param>
<param name="Summary">AbstractContext, although nowadays very far from abstract, is the base/underlying Context implementation. A Context is the home or main of a StGermain application. </param>
<param name="Description">

<p>A Context encapsulates the specfic concerns of the application. A way to look at it is that it is where one places all the variables one would typically place as global or on the main in traditional computional programming. The AbstractContext is an abstract representation of this capability from the StGermain perspective.</p>

<p>An AbstractContext implements its five Component phases of Construct, Build, Initialise, Execute and Destroy as EntryPoints. EntryPoints are sites where where functionality can be added.  Toolboxes and plugins insert algorithms or alter the control flow by these EntryPoints.  An EntryPoint is implemented as a dynamically changeable array of function pointers, which get executed sequentially.  Entrypoints can be coarse-grained ("the mesh", "the solve phase") or fine-grained ("each particle", "updating the stress of each particle"). From an aspect oriented programming point of view, these entry points are point cuts on the context concern.</p>

<p>From a software architecture point of view, plugins are a flexible way of adding runtime-configurable extensions to a core application.  AbstractContext is standardised interface for StGermain to manage toolboxes and plugins.  It is a crucial, low-level component of the framework because it establishes and maintains interconnections between other Codes and their high-level features.</p>

<p>The Context is the first component to start. An AbstractContext goes through a setup phase before proceeding to its run phase.  During setup, it goes through build and then initialise function calls. Each step contains entry point, and a hook is positioned there to attach each function call.  Following the setup phase, AbstractContext enters the Run phase.  It encapsulates timing, stepping through iterations to solve the equation, and collating and saving output. </p>

</param>


<list name="Params">
	<struct>
		<param name="Name">outputEvery</param>
		<param name="Type">Unsigned int</param>
		<param name="Default">1</param>
		<param name="Description">Specifies how often to output FrequentOutput.dat. 0 means not at all.</param>
	</struct>
	<struct>
		<param name="Name">dumpEvery</param>
		<param name="Type">Unsigned int</param>
		<param name="Default">10</param>
		<param name="Description">Specifies how often to output big data dumps (if you use gLucifer, this is when gLufier renders). 0 means not at all.</param>
	</struct>
	<struct>
		<param name="Name">checkpointEvery</param>
		<param name="Type">Unsigned int</param>
		<param name="Default">0</param>
		<param name="Description">Specifies how often to output checkpoints (if you use gLucifer, this is when gLufier renders). 0 means not at all.</param>
	</struct>
	<struct>
		<param name="Name">experimentName</param>
		<param name="Type">String</param>
		<param name="Default">experiment</param>
		<param name="Description">Not used by anything at present.</param>
	</struct>
	<struct>
		<param name="Name">outputPath</param>
		<param name="Type">String</param>
		<param name="Default">./</param>
		<param name="Description">Specifies the relative path to output and dump into.</param>
	</struct>
   <struct>
      <param name="Name">timestepFactor</param>
      <param name="Type">double</param>
      <param name="Default">1</param>
      <param name="Description">A factor for the timestep increment legth. As the factor is applied after the courant timestep is calculated, a value >> 1 will most likely cause numerical instabilities. By default no scaling is applied (a timestepFactor of 1.0).</param>
   </struct>
	<struct>
		<param name="Name">checkpointPath</param>
		<param name="Type">String</param>
		<param name="Default">outputPath</param>
		<param name="Description">Specifies the relative path to read and write checkpoint files to if checkpointReadPath or checkpointWritePath are not defined. </param>
	</struct>
	<struct>
		<param name="Name">checkpointReadPath</param>
		<param name="Type">String</param>
		<param name="Default">checkpointPath</param>
		<param name="Description">Specifies the relative path to read checkpoint files from when restarting.</param>
	</struct>
	<struct>
		<param name="Name">checkpointWritePath</param>
		<param name="Type">String</param>
		<param name="Default">checkpointPath</param>
		<param name="Description">Specifies the relative path to save checkpoint files to. </param>
	</struct>
	<struct>
		<param name="Name">start</param>
		<param name="Type">Double</param>
		<param name="Default">Context specific</param>
		<param name="Description">The start time of the simulation.</param>
	</struct>
	<struct>
		<param name="Name">startTime</param>
		<param name="Type">Double</param>
		<param name="Default">Context specific</param>
		<param name="Description">Deprecated - see "start".</param>
	</struct>
	<struct>
		<param name="Name">end</param>
		<param name="Type">Double</param>
		<param name="Default">Context specific</param>
		<param name="Description">The end time of the simulation. This will stop the simulation even if the desired number of timesteps have not been reached.</param>
	</struct>
	<struct>
		<param name="Name">stop</param>
		<param name="Type">Double</param>
		<param name="Default">Context specific</param>
		<param name="Description">Deprecated - see "end".</param>
	</struct>
	<struct>
		<param name="Name">maxLoops</param>
		<param name="Type">Double</param>
		<param name="Default">0</param>
		<param name="Description">The maximum number of timesteps to run the simulation. If this is a restart from checkpoint, the effective final timestep is the restart timestep timestep plus this value. 0 means no maximum is applied.</param>
	</struct>
	<struct>
		<param name="Name">maxTimeSteps</param>
		<param name="Type">Double</param>
		<param name="Default">0</param>
		<param name="Description">Deprecated - see maxLoops.</param>
	</struct>
	<struct>
		<param name="Name">finalTimeStep</param>
		<param name="Type">Double</param>
		<param name="Default">0</param>
		<param name="Description">The maximum number of timesteps to run the simulation. 0 means no maximum is applied.</param>
	</struct>
	<struct>
		<param name="Name">restartTimeStep</param>
		<param name="Type">Double</param>
		<param name="Default">0</param>
		<param name="Description">The timestep to enforce when loading from a checkpoint. O means ignore this parameter (use "start" time).</param>
	</struct>
	<struct>
		<param name="Name">checkPointPrefixString</param>
		<param name="Type">String</param>
		<param name="Default">""</param>
		<param name="Description">Prefixes checkpoint filenames.</param>
	</struct>
</list>


<list name="Dependencies">
	<!-- None -->
</list>


<param name="Example">n/a</param>

</StGermainData>

