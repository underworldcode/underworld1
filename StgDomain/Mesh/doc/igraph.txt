===============================================================================
Purpose
===============================================================================

To provide an incidence graph based mesh topology implementation.

===============================================================================
Description
===============================================================================

IGraph inherits from MeshTopology and, as such, implements a mesh topology,
usable with any Mesh. IGraph represents a mesh topology using directly stored
incidence relationships, for example each element's set of nodal indices are
stored explicitly. Not all relationships need to be stored, for example in
certain classes of problems one may only need to store element nodes and
nothing else; other problems may require element nodes, node elements and
node neighbors. IGraph is flexible in which relationships will be stored.

===============================================================================
Methods
===============================================================================

-------------------------------------------------------------------------------
void SetNumDims(void* self, int nDims)

   Set the number of topological dimensions in the IGraph. This method will
   clear any existing information.

-------------------------------------------------------------------------------
void SetDomain(void* self, int dim, Sync* sync)

   Set the Sync object which represents the distribution of topological
   elements for dimension "dim".

-------------------------------------------------------------------------------
void SetElements(void* self, int dim, int nEls, const int* globals)

   Set the topological elements for dimension "dim". The elements are stored
   as an array of global indices in "nEls" and "globals". This method will
   determine the communication patterns required automatically.

-------------------------------------------------------------------------------
void SetLocalElements(void* self, int dim, int nEls, const int* globals)

   Set the topological elements for dimension "dim" that are to be considered
   local to this rank. The elements are to be provided as an array of global
   indices in "nEls" and "globals".

-------------------------------------------------------------------------------
void AddLocalElements(void* self, int dim, int nEls, const int* globals)

   Add topological elements to the existing local elements in dimension "dim".
   The elements are to be provided as an array of global indices in "nEls" and
   "globals".

-------------------------------------------------------------------------------
void RemoveLocalElements(void* self, int dim, int nEls, const int* globals,
                         IMap* map)

   Remove topological elements from the existing local elements in dimension
   "dim". The elements are to be provided as an array of global indices in
   "nEls" and "globals".

-------------------------------------------------------------------------------
void SetRemoteElements(void* self, int dim, int nEls, const int* globals)

   Set the topological elements for dimension "dim" that are to be considered
   remote to this rank. The elements are to be provided as an array of global
   indices in "nEls" and "globals".

-------------------------------------------------------------------------------
void AddRemoteElements(void* self, int dim, int nEls, const int* globals)

   Add topological elements to the existing remote elements in dimension "dim".
   The elements are to be provided as an array of global indices in "nEls" and
   "globals".

-------------------------------------------------------------------------------
void RemoveRemoteElements(void* self, int dim, int nEls, const int* globals,
                          IMap* map)

   Remove topological elements from the existing remote elements in dimension
   "dim". The elements are to be provided as an array of global indices in
   "nEls" and "globals".

-------------------------------------------------------------------------------
void SetBoundaryElements(void* self, int dim, int nEls, const int* els )

   Set the elements for dimension "dim" that are considered to be on the
   boundary of the mesh.

-------------------------------------------------------------------------------
void SetIncidence(void* self, int fromDim, int fromEl, int toDim, int nIncEls,
                  const int* incEls )

-------------------------------------------------------------------------------
void RemoveIncidence(void* self, int fromDim, int toDim)

-------------------------------------------------------------------------------
void InvertIncidence(void* self, int fromDim, int toDim)

-------------------------------------------------------------------------------
void ExpandIncidence(void* self, int dim)

-------------------------------------------------------------------------------
void SetShadowDepth(void* self, int depth)

-------------------------------------------------------------------------------
void Clear(void* self)

-------------------------------------------------------------------------------
void ClearDims(void* self), (self)

-------------------------------------------------------------------------------
void ClearElements(void* self)

-------------------------------------------------------------------------------
void ClearIncidence(void* self)

-------------------------------------------------------------------------------
Bool HasDomain(const void* self, int dim)

-------------------------------------------------------------------------------
const Sync* GetDomain(const void* self, int dim)

-------------------------------------------------------------------------------
void GetBoundaryElements(const void* self, int dim, int* nEls, const int** els)

-------------------------------------------------------------------------------
Bool HasIncidence(const void* self, int fromDim, int toDim)

-------------------------------------------------------------------------------
int GetIncidenceSize(const void* self, int fromDim, int fromEl, int toDim)

-------------------------------------------------------------------------------
void GetIncidence(void* self, int fromDim, int fromEl, int toDim, IArray* inc)
