/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**
** Copyright (C), 2003, Victorian Partnership for Advanced Computing (VPAC) Ltd, 110 Victoria Street, Melbourne, 3053, Australia.
**
** Authors:
**	Stevan M. Quenette, Senior Software Engineer, VPAC. (steve@vpac.org)
**	Patrick D. Sunter, Software Engineer, VPAC. (pds@vpac.org)
**	Luke J. Hodkinson, Computational Engineer, VPAC. (lhodkins@vpac.org)
**	Siew-Ching Tan, Software Engineer, VPAC. (siew@vpac.org)
**	Alan H. Lo, Computational Engineer, VPAC. (alan@vpac.org)
**	Raquibul Hassan, Computational Engineer, VPAC. (raq@vpac.org)
**
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Lesser General Public
**  License as published by the Free Software Foundation; either
**  version 2.1 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Lesser General Public License for more details.
**
**  You should have received a copy of the GNU Lesser General Public
**  License along with this library; if not, write to the Free Software
**  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
**
*/
/** \file
**  Role:
**
** Assumptions:
**
** Invariants:
**
** Comments:
**
** $Id: CommTopology.h 3584 2006-05-16 11:11:07Z PatrickSunter $
**
**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#ifndef __StgDomain_Mesh_CommTopology_h__
#define __StgDomain_Mesh_CommTopology_h__

	/** Textual name of this class */
	extern const Type CommTopology_Type;

	/** Virtual function types */

	/** Class contents */
	#define __CommTopology			\
		/* General info */		\
		__Stg_Class			\
						\
		/* Virtual info */		\
						\
		/* CommTopology info */		\
		MPI_Comm	comm;		\
		unsigned	nIncRanks;	\
		unsigned*	incRanks;	\
		unsigned*	order;		\
		UIntMap*	glMap;

	struct CommTopology { __CommTopology };

	/*--------------------------------------------------------------------------------------------------------------------------
	** Constructors
	*/

	#define COMMTOPOLOGY_DEFARGS	\
		STG_CLASS_DEFARGS

	#define COMMTOPOLOGY_PASSARGS	\
		STG_CLASS_PASSARGS

	CommTopology* CommTopology_New();
	CommTopology* _CommTopology_New( COMMTOPOLOGY_DEFARGS );
	void _CommTopology_Init( CommTopology* self );

	/*--------------------------------------------------------------------------------------------------------------------------
	** Virtual functions
	*/

	void _CommTopology_Delete( void* commTopology );
	void _CommTopology_Print( void* commTopology, Stream* stream );

	/*--------------------------------------------------------------------------------------------------------------------------
	** Public functions
	*/

	void CommTopology_SetComm( void* commTopology, MPI_Comm comm );
	void CommTopology_SetIncidence( void* commTopology, unsigned nIncRanks, unsigned* incRanks );
	void CommTopology_AddIncidence( void* commTopology, unsigned nIncRanks, unsigned* incRanks );

	MPI_Comm CommTopology_GetComm( void* commTopology );
	unsigned CommTopology_GetCommSize( void* commTopology );
	unsigned CommTopology_GetCommRank( void* commTopology );
	unsigned CommTopology_GetIncidenceSize( void* commTopology );
	void CommTopology_GetIncidence( void* commTopology, unsigned* nIncRanks, unsigned** incRanks );

	unsigned CommTopology_LocalToGlobal( void* commTopology, unsigned local );
	Bool CommTopology_GlobalToLocal( void* commTopology, unsigned global, unsigned* local );

	void _CommTopology_Allgather( void* commTopology, 
				      unsigned srcSize, void* srcArray, 
				      unsigned** dstSizes, void*** dstArrays, 
				      unsigned itemSize );
	void _CommTopology_Alltoall( void* commTopology, 
				     unsigned* srcSizes, void** srcArrays, 
				     unsigned** dstSizes, void*** dstArrays, 
				     unsigned itemSize );

	#define CommTopology_Allgather( commTopology, 			\
					srcSize, srcArray,		\
					dstSizes, dstArrays,		\
					itemSize )			\
		_CommTopology_Allgather( commTopology,			\
					 srcSize, (void*)srcArray,	\
					 dstSizes, (void***)dstArrays,	\
					 itemSize )

	#define CommTopology_Alltoall( commTopology, 			\
				       srcSizes, srcArrays,		\
				       dstSizes, dstArrays,		\
				       itemSize )			\
		_CommTopology_Alltoall( commTopology,			\
					srcSizes, (void**)srcArrays,	\
					dstSizes, (void***)dstArrays,	\
					itemSize )

	/*--------------------------------------------------------------------------------------------------------------------------
	** Private Member functions
	*/

	int CommTopology_CmpRanks( const void* rank0, const void* rank1 );
	void CommTopology_Destruct( CommTopology* self );

#ifndef NDEBUG
	Bool CommTopology_ValidateIncidence( CommTopology* self, unsigned nIncRanks, unsigned* incRanks );
#endif

#endif /* __StgDomain_Mesh_CommTopology_h__ */
