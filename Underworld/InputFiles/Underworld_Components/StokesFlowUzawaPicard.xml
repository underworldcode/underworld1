<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">
<!-- A StGermain input file -->
<!-- DTD to validate against -->
<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">

	<!-- Stokes Flow Stuff -->
	<struct name="components" mergeType="merge">
		<!-- Solution Vectors -->
		<struct name="solutionVelocity" mergeType="replace">
			<param name="Type">SolutionVector</param>
			<param name="FeVariable">VelocityField</param>
		</struct>
		<struct name="solutionPressure" mergeType="replace">
			<param name="Type">SolutionVector</param>
			<param name="FeVariable">PressureField</param>
		</struct>

		<!-- Force Vectors -->
		<struct name="mom_force" mergeType="replace">
			<param name="Type">ForceVector</param>
			<param name="FeVariable">VelocityField</param>
			<param name="ExtraInfo">context</param>
		</struct>
		<struct name="cont_force" mergeType="replace">
			<param name="Type">ForceVector</param>
			<param name="FeVariable">PressureField</param>
			<param name="ExtraInfo">context</param>
		</struct>
		
		<!-- Matricies -->
		<struct name="k_matrix" mergeType="replace">
			<param name="Type">StiffnessMatrix</param>
			<param name="RowVariable">VelocityField</param>
			<param name="ColumnVariable">VelocityField</param>	
			<param name="RHS">mom_force</param>
			<param name="allowZeroElementContributions">False</param>
		</struct>
		<struct name="constitutiveMatrix">
			<param name="Type">ConstitutiveMatrixCartesian</param>
			<param name="Swarm">gaussSwarm</param>
			<param name="StiffnessMatrix">k_matrix</param>
		</struct>
		<struct name="g_matrix" mergeType="replace">
			<param name="Type">StiffnessMatrix</param>
			<param name="RowVariable">VelocityField</param>
			<param name="ColumnVariable">PressureField</param>	
			<param name="RHS">mom_force</param>
			<param name="transposeRHS">cont_force</param>
			<param name="allowZeroElementContributions">False</param>
		</struct>
		<struct name="gradientStiffnessMatrixTerm" mergeType="replace">
			<param name="Type">GradientStiffnessMatrixTerm</param>
			<param name="Swarm">gaussSwarm</param>
			<param name="StiffnessMatrix">g_matrix</param>
		</struct>

		<!-- Solver Stuff -->
		<struct name="preconditioner" mergeType="replace">
			<param name="Type">StiffnessMatrix</param>
			<param name="RowVariable">PressureField</param>
			<param name="ColumnVariable">PressureField</param>	
			<param name="RHS">cont_force</param>
			<param name="allowZeroElementContributions">True</param>
		</struct>		
		<struct name="preconditionerTerm" mergeType="replace">
			<param name="Type">UzawaPreconditionerTerm</param>
			<param name="Swarm">gaussSwarm</param>
			<param name="StiffnessMatrix">preconditioner</param>
		</struct>

		<struct name="uzawa" mergeType="replace">
			<param name="Type">Stokes_SLE_UzawaSolver</param>
			<param name="velocitySolver">matrixSolver</param>
			<param name="Preconditioner">preconditioner</param>
			<param name="tolerance">1.0e-5</param>
			<param name="monitor">false</param>
			<param name="maxIterations">5000</param>
			<param name="minIterations"> 1 </param>
		</struct>
			
		<struct name="stokesEqn" mergeType="replace">
			<param name="Type">Stokes_SLE</param>
			<param name="SLE_Solver">uzawa</param>
			<param name="Context">context</param>
			<param name="StressTensorMatrix">k_matrix</param>
			<param name="GradientMatrix">g_matrix</param>
			<param name="DivergenceMatrix"></param>
			<param name="CompressibilityMatrix">c_matrix</param>
			<param name="VelocityVector">solutionVelocity</param>
			<param name="PressureVector">solutionPressure</param>
			<param name="ForceVector">mom_force</param>
			<param name="ContinuityForceVector">cont_force</param>
			<!-- ============================================================================ -->
			<!-- Define nonlinear solver to be Picard, using F = X - A(X)^{-1} b              -->
			<!-- Recommendation: Make nonlinear tolerance                                     -->
			<!--     (stokesEqn.picard_rtol) < stokes solver tolerance (uzawa.tolerance)      -->
			<!-- We are concerned with driving the  NONLINEAR RESIDUAL to zero, this does not -->
			<!-- necessarily require that the linear problem is solved to the same precision  -->
			<!-- ============================================================================ -->		 
			<param name="nonLinearSolutionType">  Picard                             </param>
			<param name="picard_FormFunctionType"> PicardFormFunction_KSPResidual    </param>
		<!--	<param name="picard_FormFunctionType"> PicardFormFunction_FormalResidual </param>  -->
			<param name="picard_ActivateMonitor"> False                              </param>
			<!-- ============================================================================ -->		 
			<!-- Relevant convergence parameters (defaults are listed below)                  -->
			<!-- Remember, these can all be specified at the command line. For example        -->
			<!--   \-\-components.stokesEqn.picard_alpha=0.5                                  -->
			<!-- ============================================================================ -->		 
			<param name="nonLinearMaxIterations"> 500     </param>
			<param name="picard_alpha">           1.0     </param> <!-- For tough problems make this smaller -->
			<param name="picard_rtol">            1.0e-8  </param>
			<param name="picard_atol">            1.0e-50 </param>
			<param name="picard_xtol">            1.0e-8  </param>
		</struct>
	</struct>	
</StGermainData>
