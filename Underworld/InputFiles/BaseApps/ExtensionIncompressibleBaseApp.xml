<?xml version="1.0"?>
<!DOCTYPE StGermainData SYSTEM "stgermain.dtd">

<StGermainData xmlns="http://www.vpac.org/StGermain/XML_IO_Handler/Jun2003">
   
   <list name="import" mergeType="merge">
      <param>Underworld</param>
   </list>

   <list name="plugins" mergeType="merge">
      <struct>
         <param name="Type">Underworld_EulerDeform</param>
         <param name="Context">context</param>
      </struct>
      <struct>
         <param name="Type">StgFEM_StandardConditionFunctions</param>
         <param name="Context">context</param>
      </struct>
      <struct>
         <param name="Type">Underworld_IncompressibleExtensionBC</param>
         <param name="Context">context</param>
      </struct>
   </list>

   <struct name="components" mergeType="merge">
      <element type="struct" name="context">
         <element type="param" name="Type">UnderworldContext</element>
       </element>
    </struct>

   <!-- Component Stuff -->
   <include>StgFEM/ConstantMesh.xml</include>
   <include>StgFEM/LinearMesh.xml</include>
   <include>StgFEM/VelocityField.xml</include>
   <include>StgFEM/PressureField.xml</include>
   <include>Underworld/GaussSwarm.xml</include> 
   <include>StgFEM/TimeIntegrator.xml</include>
   <include>PICellerator/MaterialPointSwarm.xml</include>
   <include>Underworld/StokesFlowUzawaPIC.xml</include>

   <param name="timeIntegratorOrder">1</param>

   <struct name="components" mergeType="merge">
      <struct name="buoyancyForceTerm">
         <param name="Type">BuoyancyForceTerm</param>
         <param name="ForceVector">mom_force</param>
         <param name="TemperatureField">TemperatureField</param>
         <param name="Swarm">picIntegrationPoints</param>
         <param name="gravity">gravity</param>
      </struct>
   </struct>
   
   <param name="gravity">1.0</param>
   
   <!-- <struct name="components" mergeType="merge"> -->
   <!--    <struct name="REP"> -->
   <!--       <param name="Type">REP_Algorithm</param> -->
   <!--       <param name="IntegrationPoints">picIntegrationPoints</param> -->
   <!--       <param name="ConstitutiveMatrix">constitutiveMatrix</param> -->
   <!--       <list name="RepFieldList"> -->
   <!--          <param>recoveredStrainRateField</param> -->
   <!--          <param>recoveredStressField</param> -->
   <!--       </list> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredStrainRateField" mergeType="replace"> -->
   <!--       <param name="Type">RecoveredFeVariable</param> -->
   <!--       <param name="RawField">StrainRateField</param> -->
   <!--       <param name="OrderOfInterpolation">1</param> -->
   <!--       <param name="recoverStrain">true</param> -->
   <!--       <param name="recoverPressure">false</param> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredStressField" mergeType="replace"> -->
   <!--       <param name="Type">RecoveredFeVariable</param> -->
   <!--       <param name="RawField">StrainRateField</param> -->
   <!--       <param name="recoverPressure">true</param> -->
   <!--       <param name="OrderOfInterpolation">1</param> -->
   <!--       <param name="nonLinearProblem">1</param> -->
   <!--       <param name="RawPressureField">PressureField</param> -->
   <!--       <param name="CalibratePressure">1</param> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredStrainRateInvariantField">  -->
   <!--       <param name="Type">OperatorFeVariable</param> -->
   <!--       <param name="Operator">SymmetricTensor_Invariant</param> -->
   <!--       <param name="Operand">recoveredStrainRateField</param> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredStressInvariantField">  -->
   <!--       <param name="Type">OperatorFeVariable</param> -->
   <!--       <param name="Operator">SymmetricTensor_Invariant</param> -->
   <!--       <param name="Operand">recoveredStressField</param> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredDeviatoricStressField">  -->
   <!--       <param name="Type">OperatorFeVariable</param> -->
   <!--       <param name="Operator">SymmetricTensor_MakeDeviatoric</param> -->
   <!--       <param name="Operand">recoveredStressField</param> -->
   <!--    </struct> -->
   <!--    <struct name="recoveredPressureField">  -->
   <!--       <param name="Type">OperatorFeVariable</param> -->
   <!--       <param name="Operator">SymmetricTensor_NegAverageTrace</param> -->
   <!--       <param name="Operand">recoveredStressField</param> -->
   <!--    </struct>       -->
   <!--    <struct name="recoveredDeviatoricStressInvariantField">  -->
   <!--       <param name="Type">OperatorFeVariable</param> -->
   <!--       <param name="Operator">SymmetricTensor_Invariant</param> -->
   <!--       <param name="Operand">recoveredDeviatoricStressField</param> -->
   <!--    </struct> -->
   <!-- </struct> -->
   
   <!-- Replacement for MovingMesh -->
   <struct name="components" mergeType="merge">
      <struct name="velocityRemesher">
         <param name="Type">RegularRemesherCmpt</param>
         <param name="mesh">velocityMesh</param>
         <list name="remeshDims">
            <param>0</param>
            <param>1</param>
            <param>2</param>
         </list>
      </struct>
   </struct>
   
   <struct name="EulerDeform">
      <list name="systems">
         <struct>
            <param name="mesh">constantMesh</param>
            <param name="velocityField">VelocityField</param>
         </struct>
         <struct>
            <param name="mesh">velocityMesh</param>
            <param name="remesher">velocityRemesher</param>
            <param name="velocityField">VelocityField</param>
            <list name="fields">
               <struct>
                  <param name="field">VelocityField</param>
                  <param name="variable">velocity</param>
               </struct>
            </list>
         </struct>
      </list>
   </struct>

   <!-- Make the mesh non-regular / regular as needed -->
   <struct name="components" mergeType="merge">
      <struct name="linearMeshGenerator" mergeType="merge">
         <param name="regular">True</param>
      </struct>
   </struct>

   <!-- The velocity boundary conditions for this problem are entirely specific ...
   therefore we build them in here ... not quite 2D / 3D are different --> 
   <!--    
   <param name="leftWallVelocity"> -0.5</param>
   <param name="rightWallVelocity">0.5</param>
   <param name="backWallVelocity">0.0</param>
   <param name="frontWallVelocity">0.0</param>
   <param name="constantHeight">0.5</param>
   
   <struct name="velocityBCs">
      <param name="type">CompositeVC</param>
      <list name="vcList">
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">left</param>
            <list name="variables">
               <struct>
                  <param name="name">vx</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_LeftCondition</param>
               </struct>
            </list>
         </struct>
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">right</param>
            <list name="variables">
               <struct>
                  <param name="name">vx</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_RightCondition</param>
               </struct>
            </list>
         </struct>
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">front</param>
            <list name="variables">
               <struct>
                  <param name="name">vz</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_FrontCondition</param>
               </struct>
            </list>
         </struct>
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">back</param>
            <list name="variables">
               <struct>
                  <param name="name">vz</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_BackCondition</param>
               </struct>
            </list>
         </struct>
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">top</param>
            <list name="variables">
               <struct>
                  <param name="name">vy</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_TopCondition</param>
               </struct>
            </list>
         </struct>
         <struct>
            <param name="type">WallVC</param>
            <param name="wall">bottom</param>
            <list name="variables">
               <struct>
                  <param name="name">vy</param>
                  <param name="type">func</param>
                  <param name="value">IncompressibleExtensionBC_BottomCondition</param>
               </struct>
            </list>
         </struct>
      </list>
   </struct>
   -->
</StGermainData>
